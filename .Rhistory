source("global.R")
source("model.R")
data <- getModelTrain()
whiffData <- data %>% prep()
csData <- data %>% prep(response = "StrikeCalled", forWhiff = F)
whiffLL <- whiffData %>% filter(BatterSide == "Left" & PitcherThrows == "Left")
whiffLR <- whiffData %>% filter(BatterSide == "Left" & PitcherThrows == "Right")
whiffRL <- whiffData %>% filter(BatterSide == "Right" & PitcherThrows == "Left")
whiffRR <- whiffData %>% filter(BatterSide == "Right" & PitcherThrows == "Right")
csLL <- whiffData %>% filter(BatterSide == "Left" & PitcherThrows == "Left")
csLR <- whiffData %>% filter(BatterSide == "Left" & PitcherThrows == "Right")
csRL <- whiffData %>% filter(BatterSide == "Right" & PitcherThrows == "Left")
csRR <- whiffData %>% filter(BatterSide == "Right" & PitcherThrows == "Right")
wLLXGB <- makeXGBMod(whiffLL, rounds = 200)
source("model.R")
wLLXGB <- makeXGBMod(whiffLL, rounds = 200)
wLLXGB <- makeXGBMod(whiffLL, rounds = 300)
wLLXGB <- makeXGBMod(whiffLL, rounds = 500)
wLRXGB <- makeXGBMod(whiffLR, rounds = 300)
wRLXGB <- makeXGBMod(whiffRL, rounds = 300)
wRRXGB <- makeXGBMod(whiffRR, rounds = 300)
csLLXGB <- makeXGBMod(csLL, rounds = 300)
csLRXGB <- makeXGBMod(csLR, rounds = 300)
csRLXGB <- makeXGBMod(csRL, rounds = 300)
csRRXGB <- makeXGBMod(csRR, rounds = 300)
source("global.R")
source("model.R")
data <- getModelTrain()
source("global.R")
source("model.R")
data <- getModelTrain()
whiffData <- data %>% prep()
csData <- data %>% prep(response = "StrikeCalled", forWhiff = F)
whiffLL <- whiffData %>% filter(BatterSide == "Left" & PitcherThrows == "Left")
whiffLR <- whiffData %>% filter(BatterSide == "Left" & PitcherThrows == "Right")
whiffRL <- whiffData %>% filter(BatterSide == "Right" & PitcherThrows == "Left")
whiffRR <- whiffData %>% filter(BatterSide == "Right" & PitcherThrows == "Right")
csLL <- whiffData %>% filter(BatterSide == "Left" & PitcherThrows == "Left")
csLR <- whiffData %>% filter(BatterSide == "Left" & PitcherThrows == "Right")
csRL <- whiffData %>% filter(BatterSide == "Right" & PitcherThrows == "Left")
csRR <- whiffData %>% filter(BatterSide == "Right" & PitcherThrows == "Right")
wLLXGB <- makeXGBMod(whiffLL, rounds = 36) # Rounds imputed
wLRXGB <- makeXGBMod(whiffLR, rounds = 11)
wRLXGB <- makeXGBMod(whiffRL, rounds = 10)
wRRXGB <- makeXGBMod(whiffRR, rounds = 16)
csLLXGB <- makeXGBMod(csLL, rounds = 12)
csLRXGB <- makeXGBMod(csLR, rounds = 9)
csRLXGB <- makeXGBMod(csRL, rounds = 10)
csRRXGB <- makeXGBMod(csRR, rounds = 16)
save(whiffLLXGB, file = "whiffllXGB.Rds")
save(wLLXGB, file = "whiffllXGB.Rds")
save(wLRXGB, file = "whifflrXGB.Rds")
save(wRLXGB, file = "whiffrlXGB.Rds")
save(wRRXGB, file = "whiffrrXGB.Rds")
save(csLLXGB, file = "csllXGB.Rds")
save(csLRXGB, file = "cslrXGB.Rds")
save(csRLXGB, file = "csrlXGB.Rds")
save(csRRXGB, file = "csrrXGB.Rds")
dir.create("./WhiffMods")
save(wLLXGB, file = "whiffllXGB.Rds")
save(wLRXGB, file = "whifflrXGB.Rds")
save(wRLXGB, file = "whiffrlXGB.Rds")
save(wRRXGB, file = "whiffrrXGB.Rds")
setwd("..")
dir.create("./CSMods")
save(csLLXGB, file = "csllXGB.Rds")
save(csLRXGB, file = "cslrXGB.Rds")
save(csRLXGB, file = "csrlXGB.Rds")
save(csRRXGB, file = "csrrXGB.Rds")
setwd("..")
dir.create("./WhiffMods")
save(wLLXGB, file = "./WhiffMods/whiffllXGB.Rds")
save(wLRXGB, file = "./WhiffMods/whifflrXGB.Rds")
save(wRLXGB, file = "./WhiffMods/whiffrlXGB.Rds")
save(wRRXGB, file = "./WhiffMods/whiffrrXGB.Rds")
setwd("..")
dir.create("./CSMods")
save(csLLXGB, file = "./CSMods/csllXGB.Rds")
save(csLRXGB, file = "./CSMods/cslrXGB.Rds")
save(csRLXGB, file = "./CSMods/csrlXGB.Rds")
save(csRRXGB, file = "./CSMods/csrrXGB.Rds")
setwd("..")
setwd("G:/My Drive/UNCBaseball/2022/POMods")
dir.create("./WhiffMods")
save(wLLXGB, file = "./WhiffMods/whiffllXGB.Rds")
save(wLRXGB, file = "./WhiffMods/whifflrXGB.Rds")
save(wRLXGB, file = "./WhiffMods/whiffrlXGB.Rds")
save(wRRXGB, file = "./WhiffMods/whiffrrXGB.Rds")
setwd("..")
dir.create("./CSMods")
save(csLLXGB, file = "./CSMods/csllXGB.Rds")
save(csLRXGB, file = "./CSMods/cslrXGB.Rds")
save(csRLXGB, file = "./CSMods/csrlXGB.Rds")
save(csRRXGB, file = "./CSMods/csrrXGB.Rds")
setwd("..")
setwd("G:/My Drive/UNCBaseball/2022/POMods")
dir.create("./CSMods")
save(csLLXGB, file = "./CSMods/csllXGB.Rds")
save(csLRXGB, file = "./CSMods/cslrXGB.Rds")
save(csRLXGB, file = "./CSMods/csrlXGB.Rds")
save(csRRXGB, file = "./CSMods/csrrXGB.Rds")
save(wLLXGB, file = "./WhiffMods/llXGB.Rds")
save(wLRXGB, file = "./WhiffMods/lrXGB.Rds")
save(wRLXGB, file = "./WhiffMods/rlXGB.Rds")
save(wRRXGB, file = "./WhiffMods/rrXGB.Rds")
save(csLLXGB, file = "./CSMods/llXGB.Rds")
save(csLRXGB, file = "./CSMods/lrXGB.Rds")
save(csRLXGB, file = "./CSMods/rlXGB.Rds")
save(csRRXGB, file = "./CSMods/rrXGB.Rds")
getMLBData <- function() {
months <- seq.int(from = 1, to = 12)
days <- seq.int(from = 1, to = 31)
years <- seq.int(from = 2018, to = 2022)
ret <- data.frame()
for (y in years) {
for (d in days) {
for (m in months) {
d1 <- toString(y)
d2 <- toString(d)
d3 <- toString(m)
date <- paste0(d1,"-",d2,"-",d3)
tryCatch(
expr = {ret <- rbind(ret, get_pitchfx(date_start = date))},
error = function(e) {
}
)
}
}
}
ret
}
data <- getMLBData()
#' install.packages("remotes")
#' remotes::install_github("McChickenNuggets/pitchfx")
library(remotes)
getMLBData <- function() {
months <- seq.int(from = 1, to = 12)
days <- seq.int(from = 1, to = 31)
years <- seq.int(from = 2018, to = 2022)
ret <- data.frame()
for (y in years) {
for (d in days) {
for (m in months) {
d1 <- toString(y)
d2 <- toString(d)
d3 <- toString(m)
date <- paste0(d1,"-",d2,"-",d3)
tryCatch(
expr = {ret <- rbind(ret, get_pitchfx(date_start = date))},
error = function(e) {
print(paste0("No games on ",date))
}
)
}
}
}
ret
}
data <- getMLBData()
#' install.packages("remotes")
#' remotes::install_github("McChickenNuggets/pitchfx")
library(remotes)
getMLBData <- function() {
months <- seq.int(from = 1, to = 12)
days <- seq.int(from = 1, to = 31)
years <- seq.int(from = 2018, to = 2022)
ret <- data.frame()
for (y in years) {
for (d in days) {
for (m in months) {
d1 <- toString(y)
d2 <- toString(d)
d3 <- toString(m)
date <- paste0(d1,"-",d3,"-",d2)
tryCatch(
expr = {ret <- rbind(ret, get_pitchfx(date_start = date))},
error = function(e) {
print(paste0("No games on ",date))
}
)
}
}
}
ret
}
data <- getMLBData()
library(pitchfx)
#' install.packages("remotes")
#' remotes::install_github("McChickenNuggets/pitchfx")
library(pitchfx)
get_pitchfx(date_start = "2022-10-10")
get_pitchfx(date_start = "2022-10-1")
#' install.packages("remotes")
#' remotes::install_github("McChickenNuggets/pitchfx")
library(pitchfx)
getMLBData <- function() {
months <- seq.int(from = 1, to = 12)
days <- seq.int(from = 1, to = 31)
years <- seq.int(from = 2018, to = 2022)
ret <- data.frame()
for (y in years) {
for (m in months) {
for (d in days) {
d1 <- toString(y)
d2 <- toString(d)
d3 <- toString(m)
date <- paste0(d1,"-",d3,"-",d2)
tryCatch(
expr = {ret <- rbind(ret, get_pitchfx(date_start = date))},
error = function(e) {
print(paste0("No games on ",date))
}
)
}
}
}
ret
}
data <- getMLBData()
setwd("G:/My Drive/UNCBaseball/2022/POMods")
#' install.packages("remotes")
#' remotes::install_github("McChickenNuggets/pitchfx")
library(pitchfx)
getMLBData <- function() {
months <- seq.int(from = 1, to = 12)
days <- seq.int(from = 1, to = 31)
years <- seq.int(from = 2018, to = 2022)
if (!dir.exists("./MLBData")) {
dir.create("MLBData")
}
for (y in years) {
ret <- data.frame()
for (m in months) {
for (d in days) {
d1 <- toString(y)
d2 <- toString(d)
d3 <- toString(m)
date <- paste0(d1,"-",d3,"-",d2)
tryCatch(
expr = {ret <- rbind(ret, get_pitchfx(date_start = date))},
error = function(e) {
}
)
}
}
write.csv(ret,file = paste0("MLB", toString(y), ".csv"))
print(paste0("Data for ", toString(y), " scraped!"))
}
}
data <- getMLBData()
#' install.packages("remotes")
#' remotes::install_github("McChickenNuggets/pitchfx")
library(pitchfx)
getMLBData <- function() {
months <- seq.int(from = 1, to = 12)
days <- seq.int(from = 1, to = 31)
years <- seq.int(from = 2018, to = 2022)
if (!dir.exists("./MLBData")) {
dir.create("MLBData")
}
for (y in years) {
ret <- data.frame()
for (m in months) {
for (d in days) {
d1 <- toString(y)
d2 <- toString(d)
d3 <- toString(m)
date <- paste0(d1,"-",d3,"-",d2)
tryCatch(
expr = {ret <- rbind(ret, get_pitchfx(date_start = date))
print(nrow(ret))},
error = function(e) {
}
)
}
}
write.csv(ret,file = paste0("MLB", toString(y), ".csv"))
print(paste0("Data for ", toString(y), " scraped!"))
}
}
data <- getMLBData()
